一、单例模式各种写法的优缺点：

    1.饿汉式（静态常量）
    是否可用：可用
    优点：写法简单，在类加载过程中就已经创建对象，线程安全
    缺点：如何该类没用使用过，就会造成内存浪费

    2.饿汉式（静态代码块）
    是否可用：可用
    优点：同1
    缺点：同1

    3.懒汉式（线程不安全）
    是否可用：多线程下不可用

    4.懒汉式-同步方法
    是否可用：可用
    缺点：效率低，每个线程想获得类的实例的时候，都需要进行同步

    5.同步代码块
    是否可用：不可用

    6.double-check  推荐用
    是否可用：可用
    优点：线程安全，延迟加载、效率高

    7.静态内部类      推荐用
    是否可用：可用
    优点：同6

    8.枚举           推荐用
    是否可用：可用
    适合于频繁创建和销毁的场景

二、单例被破坏的方式，以及如何防止
    破坏：1.序列化  2.反射
    防止：1.在构造方法中添加标识字段，放构造方法调用一次过后，不允许第二次调用
         2.枚举（序列化：readObject方法    反射：枚举的构造方法和newInstance方法）

三、内部类方式调用逻辑
    当调用获取实例的方法的时候，内部类才会被jvm加载，当内部类加载的时候会初始化外部类实例，仅仅只会实例一次。



